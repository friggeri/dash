// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(dashFFI)
import dashFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_dash_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_dash_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureDashInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}


public struct IntervalBlock {
    public var repeats: UInt32?
    public var steps: [IntervalStep]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(repeats: UInt32?, steps: [IntervalStep]) {
        self.repeats = repeats
        self.steps = steps
    }
}

#if compiler(>=6)
extension IntervalBlock: Sendable {}
#endif


extension IntervalBlock: Equatable, Hashable {
    public static func ==(lhs: IntervalBlock, rhs: IntervalBlock) -> Bool {
        if lhs.repeats != rhs.repeats {
            return false
        }
        if lhs.steps != rhs.steps {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(repeats)
        hasher.combine(steps)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeIntervalBlock: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IntervalBlock {
        return
            try IntervalBlock(
                repeats: FfiConverterOptionUInt32.read(from: &buf), 
                steps: FfiConverterSequenceTypeIntervalStep.read(from: &buf)
        )
    }

    public static func write(_ value: IntervalBlock, into buf: inout [UInt8]) {
        FfiConverterOptionUInt32.write(value.repeats, into: &buf)
        FfiConverterSequenceTypeIntervalStep.write(value.steps, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIntervalBlock_lift(_ buf: RustBuffer) throws -> IntervalBlock {
    return try FfiConverterTypeIntervalBlock.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIntervalBlock_lower(_ value: IntervalBlock) -> RustBuffer {
    return FfiConverterTypeIntervalBlock.lower(value)
}


public struct IntervalStep {
    public var step: WorkoutStep
    public var hasRecovery: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(step: WorkoutStep, hasRecovery: Bool) {
        self.step = step
        self.hasRecovery = hasRecovery
    }
}

#if compiler(>=6)
extension IntervalStep: Sendable {}
#endif


extension IntervalStep: Equatable, Hashable {
    public static func ==(lhs: IntervalStep, rhs: IntervalStep) -> Bool {
        if lhs.step != rhs.step {
            return false
        }
        if lhs.hasRecovery != rhs.hasRecovery {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(step)
        hasher.combine(hasRecovery)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeIntervalStep: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IntervalStep {
        return
            try IntervalStep(
                step: FfiConverterTypeWorkoutStep.read(from: &buf), 
                hasRecovery: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: IntervalStep, into buf: inout [UInt8]) {
        FfiConverterTypeWorkoutStep.write(value.step, into: &buf)
        FfiConverterBool.write(value.hasRecovery, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIntervalStep_lift(_ buf: RustBuffer) throws -> IntervalStep {
    return try FfiConverterTypeIntervalStep.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIntervalStep_lower(_ value: IntervalStep) -> RustBuffer {
    return FfiConverterTypeIntervalStep.lower(value)
}


public struct Mileage {
    public var min: Double
    public var max: Double

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(min: Double, max: Double) {
        self.min = min
        self.max = max
    }
}

#if compiler(>=6)
extension Mileage: Sendable {}
#endif


extension Mileage: Equatable, Hashable {
    public static func ==(lhs: Mileage, rhs: Mileage) -> Bool {
        if lhs.min != rhs.min {
            return false
        }
        if lhs.max != rhs.max {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(min)
        hasher.combine(max)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMileage: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Mileage {
        return
            try Mileage(
                min: FfiConverterDouble.read(from: &buf), 
                max: FfiConverterDouble.read(from: &buf)
        )
    }

    public static func write(_ value: Mileage, into buf: inout [UInt8]) {
        FfiConverterDouble.write(value.min, into: &buf)
        FfiConverterDouble.write(value.max, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMileage_lift(_ buf: RustBuffer) throws -> Mileage {
    return try FfiConverterTypeMileage.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMileage_lower(_ value: Mileage) -> RustBuffer {
    return FfiConverterTypeMileage.lower(value)
}


public struct Pace {
    public var time: Double
    public var unit: LengthUnit

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(time: Double, unit: LengthUnit) {
        self.time = time
        self.unit = unit
    }
}

#if compiler(>=6)
extension Pace: Sendable {}
#endif


extension Pace: Equatable, Hashable {
    public static func ==(lhs: Pace, rhs: Pace) -> Bool {
        if lhs.time != rhs.time {
            return false
        }
        if lhs.unit != rhs.unit {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(time)
        hasher.combine(unit)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePace: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Pace {
        return
            try Pace(
                time: FfiConverterDouble.read(from: &buf), 
                unit: FfiConverterTypeLengthUnit.read(from: &buf)
        )
    }

    public static func write(_ value: Pace, into buf: inout [UInt8]) {
        FfiConverterDouble.write(value.time, into: &buf)
        FfiConverterTypeLengthUnit.write(value.unit, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePace_lift(_ buf: RustBuffer) throws -> Pace {
    return try FfiConverterTypePace.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePace_lower(_ value: Pace) -> RustBuffer {
    return FfiConverterTypePace.lower(value)
}


public struct PaceMap {
    public var zones: [HeartRateZone: PaceRange]
    public var `default`: HeartRateZone

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(zones: [HeartRateZone: PaceRange], `default`: HeartRateZone) {
        self.zones = zones
        self.`default` = `default`
    }
}

#if compiler(>=6)
extension PaceMap: Sendable {}
#endif


extension PaceMap: Equatable, Hashable {
    public static func ==(lhs: PaceMap, rhs: PaceMap) -> Bool {
        if lhs.zones != rhs.zones {
            return false
        }
        if lhs.`default` != rhs.`default` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(zones)
        hasher.combine(`default`)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePaceMap: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaceMap {
        return
            try PaceMap(
                zones: FfiConverterDictionaryTypeHeartRateZoneTypePaceRange.read(from: &buf), 
                default: FfiConverterTypeHeartRateZone.read(from: &buf)
        )
    }

    public static func write(_ value: PaceMap, into buf: inout [UInt8]) {
        FfiConverterDictionaryTypeHeartRateZoneTypePaceRange.write(value.zones, into: &buf)
        FfiConverterTypeHeartRateZone.write(value.`default`, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePaceMap_lift(_ buf: RustBuffer) throws -> PaceMap {
    return try FfiConverterTypePaceMap.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePaceMap_lower(_ value: PaceMap) -> RustBuffer {
    return FfiConverterTypePaceMap.lower(value)
}


public struct PaceRange {
    public var min: Pace
    public var max: Pace

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(min: Pace, max: Pace) {
        self.min = min
        self.max = max
    }
}

#if compiler(>=6)
extension PaceRange: Sendable {}
#endif


extension PaceRange: Equatable, Hashable {
    public static func ==(lhs: PaceRange, rhs: PaceRange) -> Bool {
        if lhs.min != rhs.min {
            return false
        }
        if lhs.max != rhs.max {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(min)
        hasher.combine(max)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePaceRange: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PaceRange {
        return
            try PaceRange(
                min: FfiConverterTypePace.read(from: &buf), 
                max: FfiConverterTypePace.read(from: &buf)
        )
    }

    public static func write(_ value: PaceRange, into buf: inout [UInt8]) {
        FfiConverterTypePace.write(value.min, into: &buf)
        FfiConverterTypePace.write(value.max, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePaceRange_lift(_ buf: RustBuffer) throws -> PaceRange {
    return try FfiConverterTypePaceRange.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePaceRange_lower(_ value: PaceRange) -> RustBuffer {
    return FfiConverterTypePaceRange.lower(value)
}


public struct Workout {
    public var warmup: WorkoutStep?
    public var intervals: [IntervalBlock]
    public var cooldown: WorkoutStep?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(warmup: WorkoutStep?, intervals: [IntervalBlock], cooldown: WorkoutStep?) {
        self.warmup = warmup
        self.intervals = intervals
        self.cooldown = cooldown
    }
}

#if compiler(>=6)
extension Workout: Sendable {}
#endif


extension Workout: Equatable, Hashable {
    public static func ==(lhs: Workout, rhs: Workout) -> Bool {
        if lhs.warmup != rhs.warmup {
            return false
        }
        if lhs.intervals != rhs.intervals {
            return false
        }
        if lhs.cooldown != rhs.cooldown {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(warmup)
        hasher.combine(intervals)
        hasher.combine(cooldown)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWorkout: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Workout {
        return
            try Workout(
                warmup: FfiConverterOptionTypeWorkoutStep.read(from: &buf), 
                intervals: FfiConverterSequenceTypeIntervalBlock.read(from: &buf), 
                cooldown: FfiConverterOptionTypeWorkoutStep.read(from: &buf)
        )
    }

    public static func write(_ value: Workout, into buf: inout [UInt8]) {
        FfiConverterOptionTypeWorkoutStep.write(value.warmup, into: &buf)
        FfiConverterSequenceTypeIntervalBlock.write(value.intervals, into: &buf)
        FfiConverterOptionTypeWorkoutStep.write(value.cooldown, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWorkout_lift(_ buf: RustBuffer) throws -> Workout {
    return try FfiConverterTypeWorkout.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWorkout_lower(_ value: Workout) -> RustBuffer {
    return FfiConverterTypeWorkout.lower(value)
}


public struct WorkoutStep {
    public var goal: Goal
    public var alert: Alert?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(goal: Goal, alert: Alert?) {
        self.goal = goal
        self.alert = alert
    }
}

#if compiler(>=6)
extension WorkoutStep: Sendable {}
#endif


extension WorkoutStep: Equatable, Hashable {
    public static func ==(lhs: WorkoutStep, rhs: WorkoutStep) -> Bool {
        if lhs.goal != rhs.goal {
            return false
        }
        if lhs.alert != rhs.alert {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(goal)
        hasher.combine(alert)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWorkoutStep: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WorkoutStep {
        return
            try WorkoutStep(
                goal: FfiConverterTypeGoal.read(from: &buf), 
                alert: FfiConverterOptionTypeAlert.read(from: &buf)
        )
    }

    public static func write(_ value: WorkoutStep, into buf: inout [UInt8]) {
        FfiConverterTypeGoal.write(value.goal, into: &buf)
        FfiConverterOptionTypeAlert.write(value.alert, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWorkoutStep_lift(_ buf: RustBuffer) throws -> WorkoutStep {
    return try FfiConverterTypeWorkoutStep.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWorkoutStep_lower(_ value: WorkoutStep) -> RustBuffer {
    return FfiConverterTypeWorkoutStep.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Alert {
    
    case heartRate(HeartRateZone
    )
    case paceThreshold(Pace
    )
    case paceRange(min: Pace, max: Pace
    )
}


#if compiler(>=6)
extension Alert: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAlert: FfiConverterRustBuffer {
    typealias SwiftType = Alert

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Alert {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .heartRate(try FfiConverterTypeHeartRateZone.read(from: &buf)
        )
        
        case 2: return .paceThreshold(try FfiConverterTypePace.read(from: &buf)
        )
        
        case 3: return .paceRange(min: try FfiConverterTypePace.read(from: &buf), max: try FfiConverterTypePace.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Alert, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .heartRate(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeHeartRateZone.write(v1, into: &buf)
            
        
        case let .paceThreshold(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypePace.write(v1, into: &buf)
            
        
        case let .paceRange(min,max):
            writeInt(&buf, Int32(3))
            FfiConverterTypePace.write(min, into: &buf)
            FfiConverterTypePace.write(max, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAlert_lift(_ buf: RustBuffer) throws -> Alert {
    return try FfiConverterTypeAlert.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAlert_lower(_ value: Alert) -> RustBuffer {
    return FfiConverterTypeAlert.lower(value)
}


extension Alert: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Goal {
    
    case distance(value: Double, unit: LengthUnit
    )
    case duration(value: Double, unit: TimeUnit
    )
}


#if compiler(>=6)
extension Goal: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGoal: FfiConverterRustBuffer {
    typealias SwiftType = Goal

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Goal {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .distance(value: try FfiConverterDouble.read(from: &buf), unit: try FfiConverterTypeLengthUnit.read(from: &buf)
        )
        
        case 2: return .duration(value: try FfiConverterDouble.read(from: &buf), unit: try FfiConverterTypeTimeUnit.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Goal, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .distance(value,unit):
            writeInt(&buf, Int32(1))
            FfiConverterDouble.write(value, into: &buf)
            FfiConverterTypeLengthUnit.write(unit, into: &buf)
            
        
        case let .duration(value,unit):
            writeInt(&buf, Int32(2))
            FfiConverterDouble.write(value, into: &buf)
            FfiConverterTypeTimeUnit.write(unit, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGoal_lift(_ buf: RustBuffer) throws -> Goal {
    return try FfiConverterTypeGoal.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGoal_lower(_ value: Goal) -> RustBuffer {
    return FfiConverterTypeGoal.lower(value)
}


extension Goal: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum HeartRateZone {
    
    case z1
    case z2
    case z3
    case z4
    case z5
}


#if compiler(>=6)
extension HeartRateZone: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeHeartRateZone: FfiConverterRustBuffer {
    typealias SwiftType = HeartRateZone

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HeartRateZone {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .z1
        
        case 2: return .z2
        
        case 3: return .z3
        
        case 4: return .z4
        
        case 5: return .z5
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: HeartRateZone, into buf: inout [UInt8]) {
        switch value {
        
        
        case .z1:
            writeInt(&buf, Int32(1))
        
        
        case .z2:
            writeInt(&buf, Int32(2))
        
        
        case .z3:
            writeInt(&buf, Int32(3))
        
        
        case .z4:
            writeInt(&buf, Int32(4))
        
        
        case .z5:
            writeInt(&buf, Int32(5))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHeartRateZone_lift(_ buf: RustBuffer) throws -> HeartRateZone {
    return try FfiConverterTypeHeartRateZone.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHeartRateZone_lower(_ value: HeartRateZone) -> RustBuffer {
    return FfiConverterTypeHeartRateZone.lower(value)
}


extension HeartRateZone: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum LengthUnit {
    
    case miles
    case yards
    case feet
    case meters
    case kilometers
}


#if compiler(>=6)
extension LengthUnit: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLengthUnit: FfiConverterRustBuffer {
    typealias SwiftType = LengthUnit

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LengthUnit {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .miles
        
        case 2: return .yards
        
        case 3: return .feet
        
        case 4: return .meters
        
        case 5: return .kilometers
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LengthUnit, into buf: inout [UInt8]) {
        switch value {
        
        
        case .miles:
            writeInt(&buf, Int32(1))
        
        
        case .yards:
            writeInt(&buf, Int32(2))
        
        
        case .feet:
            writeInt(&buf, Int32(3))
        
        
        case .meters:
            writeInt(&buf, Int32(4))
        
        
        case .kilometers:
            writeInt(&buf, Int32(5))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLengthUnit_lift(_ buf: RustBuffer) throws -> LengthUnit {
    return try FfiConverterTypeLengthUnit.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLengthUnit_lower(_ value: LengthUnit) -> RustBuffer {
    return FfiConverterTypeLengthUnit.lower(value)
}


extension LengthUnit: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum TimeUnit {
    
    case seconds
    case minutes
    case hours
}


#if compiler(>=6)
extension TimeUnit: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTimeUnit: FfiConverterRustBuffer {
    typealias SwiftType = TimeUnit

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TimeUnit {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .seconds
        
        case 2: return .minutes
        
        case 3: return .hours
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TimeUnit, into buf: inout [UInt8]) {
        switch value {
        
        
        case .seconds:
            writeInt(&buf, Int32(1))
        
        
        case .minutes:
            writeInt(&buf, Int32(2))
        
        
        case .hours:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTimeUnit_lift(_ buf: RustBuffer) throws -> TimeUnit {
    return try FfiConverterTypeTimeUnit.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTimeUnit_lower(_ value: TimeUnit) -> RustBuffer {
    return FfiConverterTypeTimeUnit.lower(value)
}


extension TimeUnit: Equatable, Hashable {}




public enum UniffiError: Swift.Error {

    
    
    case Err(message: String)
    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUniffiError: FfiConverterRustBuffer {
    typealias SwiftType = UniffiError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UniffiError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Err(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: UniffiError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .Err(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))

        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUniffiError_lift(_ buf: RustBuffer) throws -> UniffiError {
    return try FfiConverterTypeUniffiError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUniffiError_lower(_ value: UniffiError) -> RustBuffer {
    return FfiConverterTypeUniffiError.lower(value)
}


extension UniffiError: Equatable, Hashable {}



extension UniffiError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeWorkoutStep: FfiConverterRustBuffer {
    typealias SwiftType = WorkoutStep?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeWorkoutStep.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeWorkoutStep.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeAlert: FfiConverterRustBuffer {
    typealias SwiftType = Alert?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAlert.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAlert.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeIntervalBlock: FfiConverterRustBuffer {
    typealias SwiftType = [IntervalBlock]

    public static func write(_ value: [IntervalBlock], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeIntervalBlock.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [IntervalBlock] {
        let len: Int32 = try readInt(&buf)
        var seq = [IntervalBlock]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeIntervalBlock.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeIntervalStep: FfiConverterRustBuffer {
    typealias SwiftType = [IntervalStep]

    public static func write(_ value: [IntervalStep], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeIntervalStep.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [IntervalStep] {
        let len: Int32 = try readInt(&buf)
        var seq = [IntervalStep]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeIntervalStep.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryTypeHeartRateZoneTypePaceRange: FfiConverterRustBuffer {
    public static func write(_ value: [HeartRateZone: PaceRange], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterTypeHeartRateZone.write(key, into: &buf)
            FfiConverterTypePaceRange.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [HeartRateZone: PaceRange] {
        let len: Int32 = try readInt(&buf)
        var dict = [HeartRateZone: PaceRange]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterTypeHeartRateZone.read(from: &buf)
            let value = try FfiConverterTypePaceRange.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}
public func mileage(paceMap: PaceMap, workout: Workout) -> Mileage  {
    return try!  FfiConverterTypeMileage_lift(try! rustCall() {
    uniffi_dash_fn_func_mileage(
        FfiConverterTypePaceMap_lower(paceMap),
        FfiConverterTypeWorkout_lower(workout),$0
    )
})
}
public func parse(input: String)throws  -> Workout  {
    return try  FfiConverterTypeWorkout_lift(try rustCallWithError(FfiConverterTypeUniffiError_lift) {
    uniffi_dash_fn_func_parse(
        FfiConverterString.lower(input),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_dash_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_dash_checksum_func_mileage() != 12174) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_dash_checksum_func_parse() != 35379) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureDashInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all